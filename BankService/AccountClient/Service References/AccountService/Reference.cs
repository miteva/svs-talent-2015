//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AccountClient.AccountService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Account", Namespace="http://schemas.datacontract.org/2004/07/BankService")]
    [System.SerializableAttribute()]
    public partial class Account : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal BallanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CurrencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NoteField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Ballance {
            get {
                return this.BallanceField;
            }
            set {
                if ((this.BallanceField.Equals(value) != true)) {
                    this.BallanceField = value;
                    this.RaisePropertyChanged("Ballance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Currency {
            get {
                return this.CurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrencyField, value) != true)) {
                    this.CurrencyField = value;
                    this.RaisePropertyChanged("Currency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Note {
            get {
                return this.NoteField;
            }
            set {
                if ((object.ReferenceEquals(this.NoteField, value) != true)) {
                    this.NoteField = value;
                    this.RaisePropertyChanged("Note");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AccountService.IAccountService")]
    public interface IAccountService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/ProccesTransfer", ReplyAction="http://tempuri.org/IAccountService/ProccesTransferResponse")]
        AccountService.Account ProccesTransfer(AccountService.Account account, decimal amount, string currency, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/ProccesTransfer", ReplyAction="http://tempuri.org/IAccountService/ProccesTransferResponse")]
        System.Threading.Tasks.Task<AccountService.Account> ProccesTransferAsync(AccountService.Account account, decimal amount, string currency, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/Convert", ReplyAction="http://tempuri.org/IAccountService/ConvertResponse")]
        AccountService.Account Convert(AccountService.Account account, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/Convert", ReplyAction="http://tempuri.org/IAccountService/ConvertResponse")]
        System.Threading.Tasks.Task<AccountService.Account> ConvertAsync(AccountService.Account account, string currency);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAccountServiceChannel : AccountService.IAccountService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AccountServiceClient : System.ServiceModel.ClientBase<AccountService.IAccountService>, AccountService.IAccountService {
        
        public AccountServiceClient() {
        }
        
        public AccountServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AccountServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccountServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccountServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public AccountService.Account ProccesTransfer(AccountService.Account account, decimal amount, string currency, string type) {
            return base.Channel.ProccesTransfer(account, amount, currency, type);
        }
        
        public System.Threading.Tasks.Task<AccountService.Account> ProccesTransferAsync(AccountService.Account account, decimal amount, string currency, string type) {
            return base.Channel.ProccesTransferAsync(account, amount, currency, type);
        }
        
        public AccountService.Account Convert(AccountService.Account account, string currency) {
            return base.Channel.Convert(account, currency);
        }
        
        public System.Threading.Tasks.Task<AccountService.Account> ConvertAsync(AccountService.Account account, string currency) {
            return base.Channel.ConvertAsync(account, currency);
        }
    }
}
